# Generated by Django 5.0.7 on 2024-08-18 07:24

import apps.core.utils
import colorfield.fields
import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("company_structure", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="EmployeeStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=50,
                        validators=[
                            django.core.validators.MinLengthValidator(limit_value=2)
                        ],
                        verbose_name="Название",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#D6E4FF",
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="Цвет тега",
                    ),
                ),
            ],
            options={
                "verbose_name": "Рабочий статус",
                "verbose_name_plural": "Рабочие статусы",
                "ordering": ("name",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EmployeeTimeZone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=50,
                        validators=[
                            django.core.validators.MinLengthValidator(limit_value=2)
                        ],
                        verbose_name="Название",
                    ),
                ),
            ],
            options={
                "verbose_name": "Часовой пояс",
                "verbose_name_plural": "Часовые пояса",
                "ordering": ("id",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SavedContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Сохранненый контакт",
                "verbose_name_plural": "Сохранненые контакты",
            },
        ),
        migrations.CreateModel(
            name="Skill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=50,
                        validators=[
                            django.core.validators.MinLengthValidator(limit_value=2)
                        ],
                        verbose_name="Название",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#D6E4FF",
                        image_field=None,
                        max_length=25,
                        samples=None,
                        verbose_name="Цвет тега",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ключевой навык",
                "verbose_name_plural": "Ключевые навыки",
                "ordering": ("name",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Employee",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("user", "Пользователь"), ("admin", "Администратор")],
                        default="user",
                        max_length=5,
                        verbose_name="Тип учетной записи",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=50, verbose_name="Имя"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=50, verbose_name="Фамилия"),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Отчество"
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Дата регистрации"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Дата обновления"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=apps.core.utils.images_directory_path,
                        verbose_name="Изображение",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Email адрес"
                    ),
                ),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        max_length=128,
                        null=True,
                        region="RU",
                        unique=True,
                        verbose_name="Номер телефона",
                    ),
                ),
                (
                    "birthday",
                    models.DateField(
                        blank=True, null=True, verbose_name="День рождения"
                    ),
                ),
                (
                    "about_me",
                    models.TextField(blank=True, max_length=600, verbose_name="О себе"),
                ),
                (
                    "telegram",
                    models.URLField(
                        blank=True,
                        help_text="Введите телеграм аккуант в следующем формате: https://t.me/<tg-username>",
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.URLValidator(
                                message="Ссылка на телеграм аккуант должны быть в следующем формате: https://t.me/<tg-username>",
                                regex="^https:\\/\\/t\\.me\\/\\w{5,32}$",
                            )
                        ],
                        verbose_name="Telegram-аккаунт",
                    ),
                ),
                (
                    "ms_teams",
                    models.EmailField(
                        max_length=254, null=True, unique=True, verbose_name="MS Teams"
                    ),
                ),
                (
                    "employment_type",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Штат"), (1, "Аутсорс")],
                        default=0,
                        verbose_name="Форма трудоустройства",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "office",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="company_structure.companyoffice",
                        verbose_name="Офис",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="company_structure.position",
                        verbose_name="Должность",
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="employees",
                        to="company_structure.companyunit",
                        verbose_name="Подразделение",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Сотрудник",
                "verbose_name_plural": "Сотрудники",
                "ordering": ("-position__grade", "last_name"),
            },
        ),
        migrations.AddConstraint(
            model_name="employeestatus",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("name"),
                name="employeestatus_unique_name",
                violation_error_message="Данное название уже существует.",
            ),
        ),
        migrations.AddField(
            model_name="employee",
            name="status",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="staff.employeestatus",
                verbose_name="Статус",
            ),
        ),
        migrations.AddConstraint(
            model_name="employeetimezone",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("name"),
                name="employeetimezone_unique_name",
                violation_error_message="Данное название уже существует.",
            ),
        ),
        migrations.AddField(
            model_name="employee",
            name="timezone",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="staff.employeetimezone",
                verbose_name="Часовой пояс",
            ),
        ),
        migrations.AddField(
            model_name="savedcontact",
            name="contact",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="added_by",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Сохраненный контакт",
            ),
        ),
        migrations.AddField(
            model_name="savedcontact",
            name="employee",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="contacts",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Сотрудник",
            ),
        ),
        migrations.AddConstraint(
            model_name="skill",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("name"),
                name="skill_unique_name",
                violation_error_message="Данное название уже существует.",
            ),
        ),
        migrations.AddField(
            model_name="employee",
            name="skills",
            field=models.ManyToManyField(
                blank=True,
                related_name="employees",
                to="staff.skill",
                verbose_name="Навыки",
            ),
        ),
        migrations.AddConstraint(
            model_name="savedcontact",
            constraint=models.UniqueConstraint(
                fields=("employee", "contact"),
                name="unique_contact",
                violation_error_message="Контакт уже добавлен.",
            ),
        ),
        migrations.AddConstraint(
            model_name="savedcontact",
            constraint=models.CheckConstraint(
                check=models.Q(("employee", models.F("contact")), _negated=True),
                name="employee_contact_constraint",
                violation_error_message="Нельзя добавлять в контакты самого себя.",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="savedcontact",
            unique_together={("employee", "contact")},
        ),
    ]
